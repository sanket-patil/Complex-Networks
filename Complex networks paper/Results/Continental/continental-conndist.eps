%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 200 600 624
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat
        
        % don't fill if the color is out of colormap
        % that's the disctinction between drawArc and FillArc
	glev 1 WhiteLev add le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 5 div 0 0 0.5 5 div neg  0 3120 5 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
750 530 4500 3180 setclipzone
-1 -1 200000 200000 setclipzone
[] 0 setdash
32 Setcolor
33 Setcolor
 (drawpoly) 10 [ -34]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
33 Setcolor
/absolu true def
32 Setcolor
[] 0 setdash
32 Setcolor
33 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
1 Setcolor
[] 0 setdash
5 Thickness
1 Setcolor
 (drawpoly) 8 [ -2]
[707 3710 750 3753 793 3710 750 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[771 986 814 1029 857 986 814 943 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[836 2062 879 2105 922 2062 879 2019 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[900 2826 943 2869 986 2826 943 2783 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[964 3685 1007 3728 1050 3685 1007 3642 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1028 3700 1071 3743 1114 3700 1071 3657 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1093 3705 1136 3748 1179 3705 1136 3662 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1157 3710 1200 3753 1243 3710 1200 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1221 3710 1264 3753 1307 3710 1264 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1286 3709 1329 3752 1372 3709 1329 3666 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1350 3709 1393 3752 1436 3709 1393 3666 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1414 3709 1457 3752 1500 3709 1457 3666 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1478 3710 1521 3753 1564 3710 1521 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1543 3710 1586 3753 1629 3710 1586 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1607 3710 1650 3753 1693 3710 1650 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1671 3710 1714 3753 1757 3710 1714 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1736 3710 1779 3753 1822 3710 1779 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1800 3710 1843 3753 1886 3710 1843 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1864 3710 1907 3753 1950 3710 1907 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1928 3710 1971 3753 2014 3710 1971 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[1993 3710 2036 3753 2079 3710 2036 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2057 3710 2100 3753 2143 3710 2100 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2121 3710 2164 3753 2207 3710 2164 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2186 3710 2229 3753 2272 3710 2229 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2250 3710 2293 3753 2336 3710 2293 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2314 3710 2357 3753 2400 3710 2357 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2378 3710 2421 3753 2464 3710 2421 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2443 3710 2486 3753 2529 3710 2486 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2507 3710 2550 3753 2593 3710 2550 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2571 3710 2614 3753 2657 3710 2614 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2636 3710 2679 3753 2722 3710 2679 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2700 3710 2743 3753 2786 3710 2743 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2764 3710 2807 3753 2850 3710 2807 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2828 3710 2871 3753 2914 3710 2871 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2893 3710 2936 3753 2979 3710 2936 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[2957 3710 3000 3753 3043 3710 3000 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3021 3710 3064 3753 3107 3710 3064 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3086 3710 3129 3753 3172 3710 3129 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3150 3710 3193 3753 3236 3710 3193 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3214 3710 3257 3753 3300 3710 3257 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3278 3710 3321 3753 3364 3710 3321 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3343 3710 3386 3753 3429 3710 3386 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3407 3710 3450 3753 3493 3710 3450 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3471 3710 3514 3753 3557 3710 3514 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3536 3710 3579 3753 3622 3710 3579 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3600 3710 3643 3753 3686 3710 3643 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3664 3710 3707 3753 3750 3710 3707 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3728 3710 3771 3753 3814 3710 3771 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3793 3710 3836 3753 3879 3710 3836 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3857 3710 3900 3753 3943 3710 3900 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3921 3710 3964 3753 4007 3710 3964 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[3986 3710 4029 3753 4072 3710 4029 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4050 3709 4093 3752 4136 3709 4093 3666 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4114 3710 4157 3753 4200 3710 4157 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4178 3710 4221 3753 4264 3710 4221 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4243 3710 4286 3753 4329 3710 4286 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4307 3710 4350 3753 4393 3710 4350 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4371 3710 4414 3753 4457 3710 4414 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4436 3710 4479 3753 4522 3710 4479 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4500 3710 4543 3753 4586 3710 4543 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4564 3710 4607 3753 4650 3710 4607 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4628 3710 4671 3753 4714 3710 4671 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4693 3709 4736 3752 4779 3709 4736 3666 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4757 3710 4800 3753 4843 3710 4800 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4821 3710 4864 3753 4907 3710 4864 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4886 3710 4929 3753 4972 3710 4929 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[4950 3710 4993 3753 5036 3710 4993 3667 
] dogrey 
1 Setcolor
/absolu true def
1 Setcolor
 (drawpoly) 8 [ -2]
[5014 3709 5057 3752 5100 3709 5057 3666 
] dogrey 
1 Setcolor
/absolu true def
[] 0 setdash
5 Thickness
1 Setcolor
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0) 723 3874 0  0.00 [723 3774 55 99] Show
%Latex:\myput{723}{366}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(10) 1338 3874 0  0.00 [1338 3774 111 99] Show
%Latex:\myput{1338}{366}{5}{10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1393 3710 1393 3773 
] dogrey 
32 Setcolor
32 Setcolor
(20) 1981 3874 0  0.00 [1981 3774 111 99] Show
%Latex:\myput{1981}{366}{5}{20}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2036 3710 2036 3773 
] dogrey 
32 Setcolor
32 Setcolor
(30) 2624 3874 0  0.00 [2624 3774 111 99] Show
%Latex:\myput{2624}{366}{5}{30}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2679 3710 2679 3773 
] dogrey 
32 Setcolor
32 Setcolor
(40) 3266 3874 0  0.00 [3266 3774 111 99] Show
%Latex:\myput{3266}{366}{5}{40}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3321 3710 3321 3773 
] dogrey 
32 Setcolor
32 Setcolor
(50) 3909 3874 0  0.00 [3909 3774 111 99] Show
%Latex:\myput{3909}{366}{5}{50}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3964 3710 3964 3773 
] dogrey 
32 Setcolor
32 Setcolor
(60) 4552 3874 0  0.00 [4552 3774 111 99] Show
%Latex:\myput{4552}{366}{5}{60}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4607 3710 4607 3773 
] dogrey 
32 Setcolor
32 Setcolor
(70) 5195 3874 0  0.00 [5195 3774 111 99] Show
%Latex:\myput{5195}{366}{5}{70}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[964 3710 964 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1179 3710 1179 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1393 3710 1393 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1607 3710 1607 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1821 3710 1821 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2036 3710 2036 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2250 3710 2250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2464 3710 2464 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2679 3710 2679 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2893 3710 2893 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3107 3710 3107 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3321 3710 3321 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3536 3710 3536 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3750 3710 3750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3964 3710 3964 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4179 3710 4179 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4393 3710 4393 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4607 3710 4607 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4821 3710 4821 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[5036 3710 5036 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0.0) 539 3749 0  0.00 [539 3649 139 99] Show
%Latex:\myput{539}{491}{5}{0.0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
32 Setcolor
32 Setcolor
(0.1) 539 3219 0  0.00 [539 3119 139 99] Show
%Latex:\myput{539}{1021}{5}{0.1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3180 690 3180 
] dogrey 
32 Setcolor
32 Setcolor
(0.2) 539 2689 0  0.00 [539 2589 139 99] Show
%Latex:\myput{539}{1551}{5}{0.2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
32 Setcolor
32 Setcolor
(0.3) 539 2159 0  0.00 [539 2059 139 99] Show
%Latex:\myput{539}{2081}{5}{0.3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
32 Setcolor
32 Setcolor
(0.4) 539 1629 0  0.00 [539 1529 139 99] Show
%Latex:\myput{539}{2611}{5}{0.4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
32 Setcolor
32 Setcolor
(0.5) 539 1099 0  0.00 [539 999 139 99] Show
%Latex:\myput{539}{3141}{5}{0.5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1060 690 1060 
] dogrey 
32 Setcolor
32 Setcolor
(0.6) 539 569 0  0.00 [539 469 139 99] Show
%Latex:\myput{539}{3671}{5}{0.6}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3578 705 3578 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3445 705 3445 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3313 705 3313 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3180 705 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3048 705 3048 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 705 2915 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2783 705 2783 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2650 705 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2518 705 2518 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2385 705 2385 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2253 705 2253 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1987 705 1987 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1855 705 1855 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1723 705 1723 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1590 705 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1458 705 1458 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 705 1325 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1193 705 1193 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1060 705 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 928 705 928 
] dogrey 
 (drawsegs) 4 [ 32]
[750 795 705 795 
] dogrey 
 (drawsegs) 4 [ 32]
[750 663 705 663 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 5250 3710 
] dogrey 
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 530 
] dogrey 
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Pairwise connectivity distribution) 2279 293 0  0.00 [2279 193 1439 99] Show
%Latex:\myput{2279}{3947}{5}{Pairwise connectivity distribution}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Number of edge-independent paths \(lambda\)) 3000 3956 0  0.00 [3000 3856 1995 99] Show
%Latex:\myput{3000}{284}{5}{Number of edge-independent paths (lambda)}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(P\(lambda\)) 562 2100 0 270.00 [562 2000 461 99] Show
%Latex:\myput{562}{2140}{5}{P(lambda)}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 

