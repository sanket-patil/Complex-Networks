%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 0 200 600 624
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat
        
        % don't fill if the color is out of colormap
        % that's the disctinction between drawArc and FillArc
	glev 1 WhiteLev add le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[0.5 5 div 0 0 0.5 5 div neg  0 3120 5 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
750 530 4500 3180 setclipzone
-1 -1 200000 200000 setclipzone
[] 0 setdash
32 Setcolor
33 Setcolor
 (drawpoly) 10 [ -34]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
33 Setcolor
/absolu true def
32 Setcolor
[] 0 setdash
32 Setcolor
1 Setcolor
10 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
32 Setcolor
[] 0 setdash
10 Thickness
32 Setcolor
 (drawpoly) 8 [ -33]
[707 3710 750 3753 793 3710 750 3667 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[739 2751 782 2794 825 2751 782 2708 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[771 1893 814 1936 857 1893 814 1850 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[803 833 846 876 889 833 846 790 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[836 732 879 775 922 732 879 689 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[868 681 911 724 954 681 911 638 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[900 631 943 674 986 631 943 588 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[932 631 975 674 1018 631 975 588 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[964 631 1007 674 1050 631 1007 588 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[996 631 1039 674 1082 631 1039 588 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1028 631 1071 674 1114 631 1071 588 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1061 606 1104 649 1147 606 1104 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1093 606 1136 649 1179 606 1136 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1125 606 1168 649 1211 606 1168 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1157 606 1200 649 1243 606 1200 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1189 606 1232 649 1275 606 1232 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1221 606 1264 649 1307 606 1264 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1253 606 1296 649 1339 606 1296 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1286 606 1329 649 1372 606 1329 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1318 606 1361 649 1404 606 1361 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1350 606 1393 649 1436 606 1393 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1382 606 1425 649 1468 606 1425 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1414 606 1457 649 1500 606 1457 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1446 606 1489 649 1532 606 1489 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1478 606 1521 649 1564 606 1521 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1511 606 1554 649 1597 606 1554 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1543 606 1586 649 1629 606 1586 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1575 606 1618 649 1661 606 1618 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1607 606 1650 649 1693 606 1650 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1639 606 1682 649 1725 606 1682 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1671 606 1714 649 1757 606 1714 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1703 606 1746 649 1789 606 1746 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1736 606 1779 649 1822 606 1779 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1768 606 1811 649 1854 606 1811 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1800 606 1843 649 1886 606 1843 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1832 606 1875 649 1918 606 1875 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1864 606 1907 649 1950 606 1907 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1896 606 1939 649 1982 606 1939 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1928 606 1971 649 2014 606 1971 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1961 606 2004 649 2047 606 2004 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[1993 606 2036 649 2079 606 2036 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2025 606 2068 649 2111 606 2068 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2057 606 2100 649 2143 606 2100 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2089 606 2132 649 2175 606 2132 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2121 606 2164 649 2207 606 2164 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2153 606 2196 649 2239 606 2196 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2186 606 2229 649 2272 606 2229 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2218 606 2261 649 2304 606 2261 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2250 606 2293 649 2336 606 2293 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2282 606 2325 649 2368 606 2325 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2314 606 2357 649 2400 606 2357 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2346 606 2389 649 2432 606 2389 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2378 606 2421 649 2464 606 2421 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2411 606 2454 649 2497 606 2454 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2443 606 2486 649 2529 606 2486 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2475 606 2518 649 2561 606 2518 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2507 606 2550 649 2593 606 2550 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2539 606 2582 649 2625 606 2582 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2571 606 2614 649 2657 606 2614 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2603 606 2646 649 2689 606 2646 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2636 606 2679 649 2722 606 2679 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2668 606 2711 649 2754 606 2711 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2700 606 2743 649 2786 606 2743 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2732 606 2775 649 2818 606 2775 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2764 606 2807 649 2850 606 2807 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2796 606 2839 649 2882 606 2839 563 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2828 580 2871 623 2914 580 2871 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2861 580 2904 623 2947 580 2904 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2893 580 2936 623 2979 580 2936 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2925 580 2968 623 3011 580 2968 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2957 580 3000 623 3043 580 3000 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[2989 580 3032 623 3075 580 3032 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3021 580 3064 623 3107 580 3064 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3053 580 3096 623 3139 580 3096 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3086 580 3129 623 3172 580 3129 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3118 580 3161 623 3204 580 3161 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3150 580 3193 623 3236 580 3193 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3182 580 3225 623 3268 580 3225 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3214 580 3257 623 3300 580 3257 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3246 580 3289 623 3332 580 3289 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3278 580 3321 623 3364 580 3321 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3311 580 3354 623 3397 580 3354 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3343 580 3386 623 3429 580 3386 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3375 580 3418 623 3461 580 3418 537 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3407 555 3450 598 3493 555 3450 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3439 555 3482 598 3525 555 3482 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3471 555 3514 598 3557 555 3514 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3503 555 3546 598 3589 555 3546 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3536 555 3579 598 3622 555 3579 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3568 555 3611 598 3654 555 3611 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3600 555 3643 598 3686 555 3643 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3632 555 3675 598 3718 555 3675 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3664 555 3707 598 3750 555 3707 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3696 555 3739 598 3782 555 3739 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3728 555 3771 598 3814 555 3771 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3761 555 3804 598 3847 555 3804 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3793 555 3836 598 3879 555 3836 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3825 555 3868 598 3911 555 3868 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3857 555 3900 598 3943 555 3900 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3889 555 3932 598 3975 555 3932 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3921 555 3964 598 4007 555 3964 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3953 555 3996 598 4039 555 3996 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[3986 555 4029 598 4072 555 4029 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4018 555 4061 598 4104 555 4061 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4050 555 4093 598 4136 555 4093 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4082 555 4125 598 4168 555 4125 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4114 555 4157 598 4200 555 4157 512 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4146 530 4189 573 4232 530 4189 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4178 530 4221 573 4264 530 4221 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4211 530 4254 573 4297 530 4254 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4243 530 4286 573 4329 530 4286 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4275 530 4318 573 4361 530 4318 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4307 530 4350 573 4393 530 4350 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4339 530 4382 573 4425 530 4382 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4371 530 4414 573 4457 530 4414 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4403 530 4446 573 4489 530 4446 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4436 530 4479 573 4522 530 4479 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4468 530 4511 573 4554 530 4511 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4500 530 4543 573 4586 530 4543 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4532 530 4575 573 4618 530 4575 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4564 530 4607 573 4650 530 4607 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4596 530 4639 573 4682 530 4639 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4628 530 4671 573 4714 530 4671 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4661 530 4704 573 4747 530 4704 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4693 530 4736 573 4779 530 4736 487 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
 (drawpoly) 8 [ -33]
[4725 530 4768 573 4811 530 4768 487 
] dogrey 
32 Setcolor
/absolu true def
[] 0 setdash
10 Thickness
32 Setcolor
1 Setcolor
10 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 252 [ 0]
[750 3710 782 2751 814 1893 846 833 879 732 911 681 943 631 975 631 1007 631 1039 631 
1071 631 1104 606 1136 606 1168 606 1200 606 1232 606 1264 606 1296 606 1329 606 1361 606 
1393 606 1425 606 1457 606 1489 606 1521 606 1554 606 1586 606 1618 606 1650 606 1682 606 
1714 606 1746 606 1779 606 1811 606 1843 606 1875 606 1907 606 1939 606 1971 606 2004 606 
2036 606 2068 606 2100 606 2132 606 2164 606 2196 606 2229 606 2261 606 2293 606 2325 606 
2357 606 2389 606 2421 606 2454 606 2486 606 2518 606 2550 606 2582 606 2614 606 2646 606 
2679 606 2711 606 2743 606 2775 606 2807 606 2839 606 2871 580 2904 580 2936 580 2968 580 
3000 580 3032 580 3064 580 3096 580 3129 580 3161 580 3193 580 3225 580 3257 580 3289 580 
3321 580 3354 580 3386 580 3418 580 3450 555 3482 555 3514 555 3546 555 3579 555 3611 555 
3643 555 3675 555 3707 555 3739 555 3771 555 3804 555 3836 555 3868 555 3900 555 3932 555 
3964 555 3996 555 4029 555 4061 555 4093 555 4125 555 4157 555 4189 530 4221 530 4254 530 
4286 530 4318 530 4350 530 4382 530 4414 530 4446 530 4479 530 4511 530 4543 530 4575 530 
4607 530 4639 530 4671 530 4704 530 4736 530 4768 530 
] dogrey 
1 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0) 723 3874 0  0.00 [723 3774 55 99] Show
%Latex:\myput{723}{366}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(20) 1338 3874 0  0.00 [1338 3774 111 99] Show
%Latex:\myput{1338}{366}{5}{20}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1393 3710 1393 3773 
] dogrey 
32 Setcolor
32 Setcolor
(40) 1981 3874 0  0.00 [1981 3774 111 99] Show
%Latex:\myput{1981}{366}{5}{40}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2036 3710 2036 3773 
] dogrey 
32 Setcolor
32 Setcolor
(60) 2624 3874 0  0.00 [2624 3774 111 99] Show
%Latex:\myput{2624}{366}{5}{60}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2679 3710 2679 3773 
] dogrey 
32 Setcolor
32 Setcolor
(80) 3266 3874 0  0.00 [3266 3774 111 99] Show
%Latex:\myput{3266}{366}{5}{80}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3321 3710 3321 3773 
] dogrey 
32 Setcolor
32 Setcolor
(100) 3881 3874 0  0.00 [3881 3774 166 99] Show
%Latex:\myput{3881}{366}{5}{100}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3964 3710 3964 3773 
] dogrey 
32 Setcolor
32 Setcolor
(120) 4524 3874 0  0.00 [4524 3774 166 99] Show
%Latex:\myput{4524}{366}{5}{120}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4607 3710 4607 3773 
] dogrey 
32 Setcolor
32 Setcolor
(140) 5167 3874 0  0.00 [5167 3774 166 99] Show
%Latex:\myput{5167}{366}{5}{140}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[964 3710 964 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1179 3710 1179 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1393 3710 1393 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1607 3710 1607 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1821 3710 1821 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2036 3710 2036 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2250 3710 2250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2464 3710 2464 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2679 3710 2679 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2893 3710 2893 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3107 3710 3107 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3321 3710 3321 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3536 3710 3536 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3750 3710 3750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3964 3710 3964 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4179 3710 4179 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4393 3710 4393 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4607 3710 4607 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4821 3710 4821 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[5036 3710 5036 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(0.0) 539 3749 0  0.00 [539 3649 139 99] Show
%Latex:\myput{539}{491}{5}{0.0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
32 Setcolor
32 Setcolor
(0.1) 539 3431 0  0.00 [539 3331 139 99] Show
%Latex:\myput{539}{809}{5}{0.1}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3392 690 3392 
] dogrey 
32 Setcolor
32 Setcolor
(0.2) 539 3113 0  0.00 [539 3013 139 99] Show
%Latex:\myput{539}{1127}{5}{0.2}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3074 690 3074 
] dogrey 
32 Setcolor
32 Setcolor
(0.3) 539 2795 0  0.00 [539 2695 139 99] Show
%Latex:\myput{539}{1445}{5}{0.3}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2756 690 2756 
] dogrey 
32 Setcolor
32 Setcolor
(0.4) 539 2477 0  0.00 [539 2377 139 99] Show
%Latex:\myput{539}{1763}{5}{0.4}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2438 690 2438 
] dogrey 
32 Setcolor
32 Setcolor
(0.5) 539 2159 0  0.00 [539 2059 139 99] Show
%Latex:\myput{539}{2081}{5}{0.5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
32 Setcolor
32 Setcolor
(0.6) 539 1841 0  0.00 [539 1741 139 99] Show
%Latex:\myput{539}{2399}{5}{0.6}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1802 690 1802 
] dogrey 
32 Setcolor
32 Setcolor
(0.7) 539 1523 0  0.00 [539 1423 139 99] Show
%Latex:\myput{539}{2717}{5}{0.7}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1484 690 1484 
] dogrey 
32 Setcolor
32 Setcolor
(0.8) 539 1205 0  0.00 [539 1105 139 99] Show
%Latex:\myput{539}{3035}{5}{0.8}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1166 690 1166 
] dogrey 
32 Setcolor
32 Setcolor
(0.9) 539 887 0  0.00 [539 787 139 99] Show
%Latex:\myput{539}{3353}{5}{0.9}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 848 690 848 
] dogrey 
32 Setcolor
32 Setcolor
(1.0) 539 569 0  0.00 [539 469 139 99] Show
%Latex:\myput{539}{3671}{5}{1.0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3551 705 3551 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3392 705 3392 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3233 705 3233 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3074 705 3074 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 705 2915 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2756 705 2756 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2597 705 2597 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2438 705 2438 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2279 705 2279 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1961 705 1961 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1802 705 1802 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1643 705 1643 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1484 705 1484 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 705 1325 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1166 705 1166 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1007 705 1007 
] dogrey 
 (drawsegs) 4 [ 32]
[750 848 705 848 
] dogrey 
 (drawsegs) 4 [ 32]
[750 689 705 689 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 5250 3710 
] dogrey 
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 530 
] dogrey 
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Degree CDF \(Continental Airlines\)) 2240 293 0  0.00 [2240 193 1517 99] Show
%Latex:\myput{2240}{3947}{5}{Degree CDF (Continental Airlines)}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Degree \(k\)) 3000 3956 0  0.00 [3000 3856 472 99] Show
%Latex:\myput{3000}{284}{5}{Degree (k)}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 

